import ballerina/email;
import ballerina/log;
import ballerina/time;
import ballerinax/scim;

configurable string asgardeoOrg = ?;
configurable string asgardeoUserUrl = ?;
configurable string clientId = ?;
configurable string clientSecret = ?;
configurable string[] recipientEmails = ?;
configurable string senderEmail = ?;
configurable string smtpHost = ?;
configurable string smtpUsername = ?;
configurable string smtpPassword = ?;

scim:ConnectorConfig scimConfig = {
    orgName: asgardeoOrg,
    clientId: clientId,
    clientSecret: clientSecret,
    scope: ["internal_user_mgt_list"]
};

scim:Client scimClient = check new (scimConfig);
int count = 0;
int totalUsers = 0;
time:Utc currentDate = time:utcNow();
const decimal ONE_DAY_IN_SECONDS = 86400;
const time:Seconds SEVEN_DAYS_IN_SECONDS = 604800;

public function main() returns error? {
    json[] userList = check getUserList();
    string userDataTable = check generateUserDataTable(userList);
    error? err = sendMail(userDataTable);
    if (err is error) {
        log:printError(err.message());
    }
}

# Retrieves a list of users from the past week using SCIM filtering based on creation date.
#
# + return - A JSON array containing user data for users created in the past week.
function getUserList() returns error|json[] {
    json[] userList = [];
    time:Utc createdDate;
    currentDate = check time:utcFromString(getDate(0) + "T00:00:00Z");
    time:Utc startDate = time:utcAddSeconds(currentDate, -SEVEN_DAYS_IN_SECONDS);

    scim:UserResponse|scim:ErrorResponse|error totalResultsResponse = check scimClient->searchUser({attributes: ["totalResults"]});
    totalUsers = totalResultsResponse is scim:UserResponse ? totalResultsResponse.totalResults ?: 0 : 0;

    scim:UserResponse|scim:ErrorResponse|error searchResponse = check scimClient->searchUser({attributes: ["emails", "meta"], count: totalUsers});

    if searchResponse is scim:UserResponse && searchResponse.Resources.toString() != "" {
        json[] userResources = check searchResponse.Resources.toJson().ensureType();
        foreach json userResource in userResources {
            createdDate = check time:utcFromString(check userResource.meta.created);
            if createdDate >= startDate {
                userList.push(userResource.toJson());
            }
        }
    }
    return userList;
}

# Generates an HTML table presenting user information in a formatted way, excluding users with emails ending in "wso2.com"
#
# + userList - A JSON array containing user data retrieved from SCIM.
# + return - The generated HTML table representing user data. 
function generateUserDataTable(json[] userList) returns string|error {
    json|error formattedValue;
    json[] emails;
    string htmlTable = "<table style='margin-left: 0; margin-right: auto'><thead><tr><th>Email Address</th><th>Asgardeo URL</th></tr></thead><tbody>";

    foreach json user in userList {
        map<json> userData = check user.ensureType();
        emails = check userData.emails.ensureType();

        if emails[0].toString().includes("wso2.com") {
            continue;
        }
        htmlTable += "<tr>";
        foreach string key in ["emails", "location"] {
            formattedValue = key == "emails" ? emails[0] : asgardeoUserUrl + (check userData.id).toString();
            if formattedValue is json {
                htmlTable += string `<td>${formattedValue.toString()}</td>`;
            }
        }
        htmlTable += "</tr>";
        count += 1;
    }
    htmlTable += "</tbody></table>";
    return htmlTable;
}

# Sends an email notification containing a weekly report on new user signups.
#
# + userDataTable - The HTML table containing user data generated by generateUserDataTable.
# + return - An error object if the email sending fails, otherwise null.
function sendMail(string userDataTable) returns error? {
    string startDate = getDate(-SEVEN_DAYS_IN_SECONDS);
    string endDate = getDate(-ONE_DAY_IN_SECONDS);

    scim:UserResponse|scim:ErrorResponse|error wso2UsersResponse = check scimClient->searchUser({filter: "emails co wso2.com", attributes: ["totalResults"], count: totalUsers});
    int wso2Users = wso2UsersResponse is scim:UserResponse ? wso2UsersResponse.totalResults ?: 0 : 0;

    string emailTemplate = "<!DOCTYPE html><html><head><style>table { border-collapse: collapse; border: 1px solid black; width: 80%; margin: 20px auto; } th, td { border: 1px solid black; padding: 5px; } table table { width: 100%; margin: 10px auto; } table table th, table table td { border: 1px solid #ddd; } div { color: black; } </style></head><body><div>New user sign ups to fhirtools.io from " + startDate + " to " + endDate + "<br/><br/>New users registered for the week: " + count.toString() + "<br/><br/>" + "Total users (WSO2 users excluded): " + (totalUsers - wso2Users).toString() + " <br/><br/><b>User Information </b> </div>" + userDataTable + " </body> </html>";

    email:SmtpConfiguration smtpConfig = {
        port: 587,
        security: "START_TLS_AUTO"
    };

    email:SmtpClient smtpClient = check new (smtpHost, smtpUsername, smtpPassword, smtpConfig);

    email:Message email = {
        to: recipientEmails,
        subject: string `[fhirtools.io] Weekly Report - New User Sign Ups (${startDate} to ${endDate})`,
        'from: senderEmail,
        htmlBody: emailTemplate
    };

    check smtpClient->sendMessage(email);
    log:printInfo("Email sent");
}

# Converts a time offset in seconds from the current date to a formatted date string (YYYY-MM-DD).
#
# + daysInSeconds - The time offset in seconds.
# + return - The formatted date string.
function getDate(time:Seconds daysInSeconds) returns string {
    time:Utc givenDateUtc = time:utcAddSeconds(currentDate, daysInSeconds);
    time:Civil currentDateCivil = time:utcToCivil(givenDateUtc);
    string month = currentDateCivil.month < 10 ? "0" + currentDateCivil.month.toString() : currentDateCivil.month.toString();
    string day = currentDateCivil.day < 10 ? "0" + currentDateCivil.day.toString() : currentDateCivil.day.toString();
    return currentDateCivil.year.toString() + "-" + month + "-" + day;
}
